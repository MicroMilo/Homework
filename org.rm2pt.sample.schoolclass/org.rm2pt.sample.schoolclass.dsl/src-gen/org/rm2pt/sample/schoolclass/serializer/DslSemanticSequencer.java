/*
 * generated by Xtext 2.25.0
 */
package org.rm2pt.sample.schoolclass.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.rm2pt.sample.schoolclass.metamodel.schoolclass.Mentee;
import org.rm2pt.sample.schoolclass.metamodel.schoolclass.Mentor;
import org.rm2pt.sample.schoolclass.metamodel.schoolclass.SchoolClass;
import org.rm2pt.sample.schoolclass.metamodel.schoolclass.SchoolclassPackage;
import org.rm2pt.sample.schoolclass.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SchoolclassPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SchoolclassPackage.MENTEE:
				sequence_Mentee(context, (Mentee) semanticObject); 
				return; 
			case SchoolclassPackage.MENTOR:
				sequence_Mentor(context, (Mentor) semanticObject); 
				return; 
			case SchoolclassPackage.SCHOOL_CLASS:
				sequence_SchoolClass(context, (SchoolClass) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Person returns Mentee
	 *     Mentee returns Mentee
	 *
	 * Constraint:
	 *     (name=EString (Student+=[Person|EString] Student+=[Person|EString]*)? (Teacher+=[Person|EString] Teacher+=[Person|EString]*)?)
	 */
	protected void sequence_Mentee(ISerializationContext context, Mentee semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person returns Mentor
	 *     Mentor returns Mentor
	 *
	 * Constraint:
	 *     (name=EString (Student+=[Person|EString] Student+=[Person|EString]*)? (Teacher+=[Person|EString] Teacher+=[Person|EString]*)?)
	 */
	protected void sequence_Mentor(ISerializationContext context, Mentor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SchoolClass returns SchoolClass
	 *
	 * Constraint:
	 *     (name=EString (members+=Person members+=Person*)?)
	 */
	protected void sequence_SchoolClass(ISerializationContext context, SchoolClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
