UseCaseModel GymSystem {

	UC::book_Course include login definedBySSD(Book_CourseSSD) relatedService(Book_CourseService)
	UC::login definedBySSD(LoginSSD) relatedService(LoginService)
	UC::cancel_book_Course include login definedBySSD(Cancel_book_CourseSSD) relatedService(Cancel_book_CourseService)
	UC::register_member include login definedBySSD(Register_memberSSD) relatedService(Register_memberService)
	UC::create_Course include login definedBySSD(Create_CourseSSD) relatedService(Create_CourseService)
	UC::update_schedule include login definedBySSD(Update_scheduleSSD) relatedService(Update_scheduleService)
	UC::register_trainer include login definedBySSD(Register_trainerSSD) relatedService(Register_trainerService)
	UC::finish_Course include login definedBySSD(Finish_CourseSSD) relatedService(Finish_CourseService)

	Actor Member {
		book_Course
		cancel_book_Course
	}

	Actor Trainer {
		create_Course
		update_schedule
		finish_Course
	}

	Actor FrontDesk {
		register_member
		register_trainer
	}

	Interaction Cancel_book_CourseSSD {

		[Participants: Member Cancel_book_CourseService]

		CallMessage::Cancel_book_CourseSSDCallMessage1(listAllCourseBooked Cancel_book_CourseSSDCallMessage1SendingEnd -> Cancel_book_CourseSSDExecution1StartEnd)
		ReturnMessage::Cancel_book_CourseSSDCallMessage1Return(Cancel_book_CourseSSDExecution1FinishEnd -> Cancel_book_CourseSSDCallMessage1ReturnReceivingEnd Cancel_book_CourseSSDCallMessage1)
		CallMessage::Cancel_book_CourseSSDCallMessage3(confirmCancelBook Cancel_book_CourseSSDCallMessage3SendingEnd -> Cancel_book_CourseSSDExecution2StartEnd)
		ReturnMessage::Cancel_book_CourseSSDCallMessage3Return(Cancel_book_CourseSSDExecution2FinishEnd -> Cancel_book_CourseSSDCallMessage3ReturnReceivingEnd Cancel_book_CourseSSDCallMessage3)
		CallMessage::Cancel_book_CourseSSDCallMessage5(requestRefund Cancel_book_CourseSSDCallMessage5SendingEnd -> Cancel_book_CourseSSDExecution3StartEnd)
		ReturnMessage::Cancel_book_CourseSSDCallMessage5Return(Cancel_book_CourseSSDExecution3FinishEnd -> Cancel_book_CourseSSDCallMessage5ReturnReceivingEnd Cancel_book_CourseSSDCallMessage5)

		Execution::Cancel_book_CourseSSDExecution1(Cancel_book_CourseService Cancel_book_CourseSSDExecution1StartEnd Cancel_book_CourseSSDExecution1FinishEnd)
		Execution::Cancel_book_CourseSSDExecution2(Cancel_book_CourseService Cancel_book_CourseSSDExecution2StartEnd Cancel_book_CourseSSDExecution2FinishEnd)
		Execution::Cancel_book_CourseSSDExecution3(Cancel_book_CourseService Cancel_book_CourseSSDExecution3StartEnd Cancel_book_CourseSSDExecution3FinishEnd)

		MessageEnd::Cancel_book_CourseSSDCallMessage1SendingEnd(Member Cancel_book_CourseSSDCallMessage1)
		ExecutionEnd::Cancel_book_CourseSSDExecution1StartEnd(Cancel_book_CourseService Cancel_book_CourseSSDExecution1)
		ExecutionEnd::Cancel_book_CourseSSDExecution1FinishEnd(Cancel_book_CourseService Cancel_book_CourseSSDExecution1)
		MessageEnd::Cancel_book_CourseSSDCallMessage1ReturnReceivingEnd(Member Cancel_book_CourseSSDCallMessage1Return)
		MessageEnd::Cancel_book_CourseSSDCallMessage3SendingEnd(Member Cancel_book_CourseSSDCallMessage3)
		ExecutionEnd::Cancel_book_CourseSSDExecution2StartEnd(Cancel_book_CourseService Cancel_book_CourseSSDExecution2)
		ExecutionEnd::Cancel_book_CourseSSDExecution2FinishEnd(Cancel_book_CourseService Cancel_book_CourseSSDExecution2)
		MessageEnd::Cancel_book_CourseSSDCallMessage3ReturnReceivingEnd(Member Cancel_book_CourseSSDCallMessage3Return)
		MessageEnd::Cancel_book_CourseSSDCallMessage5SendingEnd(Member Cancel_book_CourseSSDCallMessage5)
		ExecutionEnd::Cancel_book_CourseSSDExecution3StartEnd(Cancel_book_CourseService Cancel_book_CourseSSDExecution3)
		ExecutionEnd::Cancel_book_CourseSSDExecution3FinishEnd(Cancel_book_CourseService Cancel_book_CourseSSDExecution3)
		MessageEnd::Cancel_book_CourseSSDCallMessage5ReturnReceivingEnd(Member Cancel_book_CourseSSDCallMessage5Return)

	}

	Interaction Book_CourseSSD {

		[Participants: Member Book_CourseService]

		CallMessage::Book_CourseSSDCallMessage1(listAllCourseAvailable Book_CourseSSDCallMessage1SendingEnd -> Book_CourseSSDExecution1StartEnd)
		ReturnMessage::Book_CourseSSDCallMessage1Return(Book_CourseSSDExecution1FinishEnd -> Book_CourseSSDCallMessage1ReturnReceivingEnd Book_CourseSSDCallMessage1)
		CallMessage::Book_CourseSSDCallMessage3(chooseOneBooking Book_CourseSSDCallMessage3SendingEnd -> Book_CourseSSDExecution2StartEnd)
		ReturnMessage::Book_CourseSSDCallMessage3Return(Book_CourseSSDExecution2FinishEnd -> Book_CourseSSDCallMessage3ReturnReceivingEnd Book_CourseSSDCallMessage3)
		CallMessage::Book_CourseSSDCallMessage5(payFee Book_CourseSSDCallMessage5SendingEnd -> Book_CourseSSDExecution3StartEnd)
		ReturnMessage::Book_CourseSSDCallMessage5Return(Book_CourseSSDExecution3FinishEnd -> Book_CourseSSDCallMessage5ReturnReceivingEnd Book_CourseSSDCallMessage5)

		Execution::Book_CourseSSDExecution1(Book_CourseService Book_CourseSSDExecution1StartEnd Book_CourseSSDExecution1FinishEnd)
		Execution::Book_CourseSSDExecution2(Book_CourseService Book_CourseSSDExecution2StartEnd Book_CourseSSDExecution2FinishEnd)
		Execution::Book_CourseSSDExecution3(Book_CourseService Book_CourseSSDExecution3StartEnd Book_CourseSSDExecution3FinishEnd)

		MessageEnd::Book_CourseSSDCallMessage1SendingEnd(Member Book_CourseSSDCallMessage1)
		ExecutionEnd::Book_CourseSSDExecution1StartEnd(Book_CourseService Book_CourseSSDExecution1)
		ExecutionEnd::Book_CourseSSDExecution1FinishEnd(Book_CourseService Book_CourseSSDExecution1)
		MessageEnd::Book_CourseSSDCallMessage1ReturnReceivingEnd(Member Book_CourseSSDCallMessage1Return)
		MessageEnd::Book_CourseSSDCallMessage3SendingEnd(Member Book_CourseSSDCallMessage3)
		ExecutionEnd::Book_CourseSSDExecution2StartEnd(Book_CourseService Book_CourseSSDExecution2)
		ExecutionEnd::Book_CourseSSDExecution2FinishEnd(Book_CourseService Book_CourseSSDExecution2)
		MessageEnd::Book_CourseSSDCallMessage3ReturnReceivingEnd(Member Book_CourseSSDCallMessage3Return)
		MessageEnd::Book_CourseSSDCallMessage5SendingEnd(Member Book_CourseSSDCallMessage5)
		ExecutionEnd::Book_CourseSSDExecution3StartEnd(Book_CourseService Book_CourseSSDExecution3)
		ExecutionEnd::Book_CourseSSDExecution3FinishEnd(Book_CourseService Book_CourseSSDExecution3)
		MessageEnd::Book_CourseSSDCallMessage5ReturnReceivingEnd(Member Book_CourseSSDCallMessage5Return)

	}

	Interaction LoginSSD {

		[Participants: Member FrontDesk Trainer LoginService]

		CallMessage::LoginSSDCallMessage1(login_trainer LoginSSDCallMessage1SendingEnd -> LoginSSDExecution1StartEnd)
		ReturnMessage::LoginSSDCallMessage1Return(LoginSSDExecution1FinishEnd -> LoginSSDCallMessage1ReturnReceivingEnd LoginSSDCallMessage1)
		CallMessage::LoginSSDCallMessage3(login_frontdesk LoginSSDCallMessage3SendingEnd -> LoginSSDExecution2StartEnd)
		ReturnMessage::LoginSSDCallMessage3Return(LoginSSDExecution2FinishEnd -> LoginSSDCallMessage3ReturnReceivingEnd LoginSSDCallMessage3)
		CallMessage::LoginSSDCallMessage5(login_member LoginSSDCallMessage5SendingEnd -> LoginSSDExecution3StartEnd)
		ReturnMessage::LoginSSDCallMessage5Return(LoginSSDExecution3FinishEnd -> LoginSSDCallMessage5ReturnReceivingEnd LoginSSDCallMessage5)

		Execution::LoginSSDExecution1(LoginService LoginSSDExecution1StartEnd LoginSSDExecution1FinishEnd)
		Execution::LoginSSDExecution2(LoginService LoginSSDExecution2StartEnd LoginSSDExecution2FinishEnd)
		Execution::LoginSSDExecution3(LoginService LoginSSDExecution3StartEnd LoginSSDExecution3FinishEnd)

		MessageEnd::LoginSSDCallMessage1SendingEnd(Trainer LoginSSDCallMessage1)
		ExecutionEnd::LoginSSDExecution1StartEnd(LoginService LoginSSDExecution1)
		ExecutionEnd::LoginSSDExecution1FinishEnd(LoginService LoginSSDExecution1)
		MessageEnd::LoginSSDCallMessage1ReturnReceivingEnd(Trainer LoginSSDCallMessage1Return)
		MessageEnd::LoginSSDCallMessage3SendingEnd(FrontDesk LoginSSDCallMessage3)
		ExecutionEnd::LoginSSDExecution2StartEnd(LoginService LoginSSDExecution2)
		ExecutionEnd::LoginSSDExecution2FinishEnd(LoginService LoginSSDExecution2)
		MessageEnd::LoginSSDCallMessage3ReturnReceivingEnd(FrontDesk LoginSSDCallMessage3Return)
		MessageEnd::LoginSSDCallMessage5SendingEnd(Member LoginSSDCallMessage5)
		ExecutionEnd::LoginSSDExecution3StartEnd(LoginService LoginSSDExecution3)
		ExecutionEnd::LoginSSDExecution3FinishEnd(LoginService LoginSSDExecution3)
		MessageEnd::LoginSSDCallMessage5ReturnReceivingEnd(Member LoginSSDCallMessage5Return)

	}

	Interaction Register_memberSSD {

		[Participants: FrontDesk Register_memberService]

//		CallMessage::Register_memberSSDCallMessage1(request_member_register Register_memberSSDCallMessage1SendingEnd -> Register_memberSSDExecution1StartEnd)
//		ReturnMessage::Register_memberSSDCallMessage1Return(Register_memberSSDExecution1FinishEnd -> Register_memberSSDCallMessage1ReturnReceivingEnd Register_memberSSDCallMessage1)
		CallMessage::Register_memberSSDCallMessage3(input_member_info Register_memberSSDCallMessage3SendingEnd -> Register_memberSSDExecution2StartEnd)
		ReturnMessage::Register_memberSSDCallMessage3Return(Register_memberSSDExecution2FinishEnd -> Register_memberSSDCallMessage3ReturnReceivingEnd Register_memberSSDCallMessage3)

		Execution::Register_memberSSDExecution1(Register_memberService Register_memberSSDExecution1StartEnd Register_memberSSDExecution1FinishEnd)
		Execution::Register_memberSSDExecution2(Register_memberService Register_memberSSDExecution2StartEnd Register_memberSSDExecution2FinishEnd)

//		MessageEnd::Register_memberSSDCallMessage1SendingEnd(FrontDesk Register_memberSSDCallMessage1)
		ExecutionEnd::Register_memberSSDExecution1StartEnd(Register_memberService Register_memberSSDExecution1)
		ExecutionEnd::Register_memberSSDExecution1FinishEnd(Register_memberService Register_memberSSDExecution1)
//		MessageEnd::Register_memberSSDCallMessage1ReturnReceivingEnd(FrontDesk Register_memberSSDCallMessage1Return)
		MessageEnd::Register_memberSSDCallMessage3SendingEnd(FrontDesk Register_memberSSDCallMessage3)
		ExecutionEnd::Register_memberSSDExecution2StartEnd(Register_memberService Register_memberSSDExecution2)
		ExecutionEnd::Register_memberSSDExecution2FinishEnd(Register_memberService Register_memberSSDExecution2)
		MessageEnd::Register_memberSSDCallMessage3ReturnReceivingEnd(FrontDesk Register_memberSSDCallMessage3Return)

	}

	Interaction Register_trainerSSD {

		[Participants: FrontDesk Register_trainerService]

//		CallMessage::Register_trainerSSDCallMessage1(request_trainer_register Register_trainerSSDCallMessage1SendingEnd -> Register_trainerSSDExecution1StartEnd)
//		ReturnMessage::Register_trainerSSDCallMessage1Return(Register_trainerSSDExecution1FinishEnd -> Register_trainerSSDCallMessage1ReturnReceivingEnd Register_trainerSSDCallMessage1)
		CallMessage::Register_trainerSSDCallMessage3(input_trainer_info Register_trainerSSDCallMessage3SendingEnd -> Register_trainerSSDExecution2StartEnd)
		ReturnMessage::Register_trainerSSDCallMessage3Return(Register_trainerSSDExecution2FinishEnd -> Register_trainerSSDCallMessage3ReturnReceivingEnd Register_trainerSSDCallMessage3)

		Execution::Register_trainerSSDExecution1(Register_trainerService Register_trainerSSDExecution1StartEnd Register_trainerSSDExecution1FinishEnd)
		Execution::Register_trainerSSDExecution2(Register_trainerService Register_trainerSSDExecution2StartEnd Register_trainerSSDExecution2FinishEnd)

//		MessageEnd::Register_trainerSSDCallMessage1SendingEnd(FrontDesk Register_trainerSSDCallMessage1)
		ExecutionEnd::Register_trainerSSDExecution1StartEnd(Register_trainerService Register_trainerSSDExecution1)
		ExecutionEnd::Register_trainerSSDExecution1FinishEnd(Register_trainerService Register_trainerSSDExecution1)
//		MessageEnd::Register_trainerSSDCallMessage1ReturnReceivingEnd(FrontDesk Register_trainerSSDCallMessage1Return)
		MessageEnd::Register_trainerSSDCallMessage3SendingEnd(FrontDesk Register_trainerSSDCallMessage3)
		ExecutionEnd::Register_trainerSSDExecution2StartEnd(Register_trainerService Register_trainerSSDExecution2)
		ExecutionEnd::Register_trainerSSDExecution2FinishEnd(Register_trainerService Register_trainerSSDExecution2)
		MessageEnd::Register_trainerSSDCallMessage3ReturnReceivingEnd(FrontDesk Register_trainerSSDCallMessage3Return)

	}

	Interaction Create_CourseSSD {

		[Participants: Trainer Create_CourseService]

		CallMessage::Create_CourseSSDCallMessage1(requestCreateCourse Create_CourseSSDCallMessage1SendingEnd -> Create_CourseSSDExecution1StartEnd)
		ReturnMessage::Create_CourseSSDCallMessage1Return(Create_CourseSSDExecution1FinishEnd -> Create_CourseSSDCallMessage1ReturnReceivingEnd Create_CourseSSDCallMessage1)
		CallMessage::Create_CourseSSDCallMessage3(requestCreateCourse Create_CourseSSDCallMessage3SendingEnd -> Create_CourseSSDExecution2StartEnd)
		ReturnMessage::Create_CourseSSDCallMessage3Return(Create_CourseSSDExecution2FinishEnd -> Create_CourseSSDCallMessage3ReturnReceivingEnd Create_CourseSSDCallMessage3)
		CallMessage::Create_CourseSSDCallMessage5(confirmCourseInfo Create_CourseSSDCallMessage5SendingEnd -> Create_CourseSSDExecution3StartEnd)
		ReturnMessage::Create_CourseSSDCallMessage5Return(Create_CourseSSDExecution3FinishEnd -> Create_CourseSSDCallMessage5ReturnReceivingEnd Create_CourseSSDCallMessage5)

		Execution::Create_CourseSSDExecution1(Create_CourseService Create_CourseSSDExecution1StartEnd Create_CourseSSDExecution1FinishEnd)
		Execution::Create_CourseSSDExecution2(Create_CourseService Create_CourseSSDExecution2StartEnd Create_CourseSSDExecution2FinishEnd)
		Execution::Create_CourseSSDExecution3(Create_CourseService Create_CourseSSDExecution3StartEnd Create_CourseSSDExecution3FinishEnd)

		MessageEnd::Create_CourseSSDCallMessage3SendingEnd(Trainer Create_CourseSSDCallMessage3)
		ExecutionEnd::Create_CourseSSDExecution2StartEnd(Create_CourseService Create_CourseSSDExecution2)
		ExecutionEnd::Create_CourseSSDExecution2FinishEnd(Create_CourseService Create_CourseSSDExecution2)
		MessageEnd::Create_CourseSSDCallMessage3ReturnReceivingEnd(Trainer Create_CourseSSDCallMessage3Return)
		MessageEnd::Create_CourseSSDCallMessage5SendingEnd(Trainer Create_CourseSSDCallMessage5)
		ExecutionEnd::Create_CourseSSDExecution3StartEnd(Create_CourseService Create_CourseSSDExecution3)
		ExecutionEnd::Create_CourseSSDExecution3FinishEnd(Create_CourseService Create_CourseSSDExecution3)
		MessageEnd::Create_CourseSSDCallMessage5ReturnReceivingEnd(Trainer Create_CourseSSDCallMessage5Return)
		MessageEnd::Create_CourseSSDCallMessage1SendingEnd(Trainer Create_CourseSSDCallMessage1)
		ExecutionEnd::Create_CourseSSDExecution1StartEnd(Create_CourseService Create_CourseSSDExecution1)
		ExecutionEnd::Create_CourseSSDExecution1FinishEnd(Create_CourseService Create_CourseSSDExecution1)
		MessageEnd::Create_CourseSSDCallMessage1ReturnReceivingEnd(Trainer Create_CourseSSDCallMessage1Return)

	}

	Interaction Update_scheduleSSD {

		[Participants: Trainer Update_scheduleService]

		CallMessage::Update_scheduleSSDCallMessage1(listCourseByTrainer Update_scheduleSSDCallMessage1SendingEnd -> Update_scheduleSSDExecution1StartEnd)
		ReturnMessage::Update_scheduleSSDCallMessage1Return(Update_scheduleSSDExecution1FinishEnd -> Update_scheduleSSDCallMessage1ReturnReceivingEnd Update_scheduleSSDCallMessage1)
		CallMessage::Update_scheduleSSDCallMessage3(chooseSpecificCourse Update_scheduleSSDCallMessage3SendingEnd -> Update_scheduleSSDExecution2StartEnd)
		ReturnMessage::Update_scheduleSSDCallMessage3Return(Update_scheduleSSDExecution2FinishEnd -> Update_scheduleSSDCallMessage3ReturnReceivingEnd Update_scheduleSSDCallMessage3)
		CallMessage::Update_scheduleSSDCallMessage5(confirmUpdateInfo Update_scheduleSSDCallMessage5SendingEnd -> Update_scheduleSSDExecution3StartEnd)
		ReturnMessage::Update_scheduleSSDCallMessage5Return(Update_scheduleSSDExecution3FinishEnd -> Update_scheduleSSDCallMessage5ReturnReceivingEnd Update_scheduleSSDCallMessage5)

		Execution::Update_scheduleSSDExecution1(Update_scheduleService Update_scheduleSSDExecution1StartEnd Update_scheduleSSDExecution1FinishEnd)
		Execution::Update_scheduleSSDExecution2(Update_scheduleService Update_scheduleSSDExecution2StartEnd Update_scheduleSSDExecution2FinishEnd)
		Execution::Update_scheduleSSDExecution3(Update_scheduleService Update_scheduleSSDExecution3StartEnd Update_scheduleSSDExecution3FinishEnd)

		MessageEnd::Update_scheduleSSDCallMessage1SendingEnd(Trainer Update_scheduleSSDCallMessage1)
		ExecutionEnd::Update_scheduleSSDExecution1StartEnd(Update_scheduleService Update_scheduleSSDExecution1)
		ExecutionEnd::Update_scheduleSSDExecution1FinishEnd(Update_scheduleService Update_scheduleSSDExecution1)
		MessageEnd::Update_scheduleSSDCallMessage1ReturnReceivingEnd(Trainer Update_scheduleSSDCallMessage1Return)
		MessageEnd::Update_scheduleSSDCallMessage3SendingEnd(Trainer Update_scheduleSSDCallMessage3)
		ExecutionEnd::Update_scheduleSSDExecution2StartEnd(Update_scheduleService Update_scheduleSSDExecution2)
		ExecutionEnd::Update_scheduleSSDExecution2FinishEnd(Update_scheduleService Update_scheduleSSDExecution2)
		MessageEnd::Update_scheduleSSDCallMessage3ReturnReceivingEnd(Trainer Update_scheduleSSDCallMessage3Return)
		MessageEnd::Update_scheduleSSDCallMessage5SendingEnd(Trainer Update_scheduleSSDCallMessage5)
		ExecutionEnd::Update_scheduleSSDExecution3StartEnd(Update_scheduleService Update_scheduleSSDExecution3)
		ExecutionEnd::Update_scheduleSSDExecution3FinishEnd(Update_scheduleService Update_scheduleSSDExecution3)
		MessageEnd::Update_scheduleSSDCallMessage5ReturnReceivingEnd(Trainer Update_scheduleSSDCallMessage5Return)

	}

	Interaction Finish_CourseSSD {

		[Participants: Trainer Finish_CourseService]

		CallMessage::Finish_CourseSSDCallMessage1(listAllCourseByTrainer Finish_CourseSSDCallMessage1SendingEnd -> Finish_CourseSSDExecution1StartEnd)
		ReturnMessage::Finish_CourseSSDCallMessage1Return(Finish_CourseSSDExecution1FinishEnd -> Finish_CourseSSDCallMessage1ReturnReceivingEnd Finish_CourseSSDCallMessage1)
		CallMessage::Finish_CourseSSDCallMessage3(confirmCourseFinish Finish_CourseSSDCallMessage3SendingEnd -> Finish_CourseSSDExecution2StartEnd)
		ReturnMessage::Finish_CourseSSDCallMessage3Return(Finish_CourseSSDExecution2FinishEnd -> Finish_CourseSSDCallMessage3ReturnReceivingEnd Finish_CourseSSDCallMessage3)
		CallMessage::Finish_CourseSSDCallMessage5(requestBonus Finish_CourseSSDCallMessage5SendingEnd -> Finish_CourseSSDExecution3StartEnd)
		ReturnMessage::Finish_CourseSSDCallMessage5Return(Finish_CourseSSDExecution3FinishEnd -> Finish_CourseSSDCallMessage5ReturnReceivingEnd Finish_CourseSSDCallMessage5)

		Execution::Finish_CourseSSDExecution1(Finish_CourseService Finish_CourseSSDExecution1StartEnd Finish_CourseSSDExecution1FinishEnd)
		Execution::Finish_CourseSSDExecution2(Finish_CourseService Finish_CourseSSDExecution2StartEnd Finish_CourseSSDExecution2FinishEnd)
		Execution::Finish_CourseSSDExecution3(Finish_CourseService Finish_CourseSSDExecution3StartEnd Finish_CourseSSDExecution3FinishEnd)

		MessageEnd::Finish_CourseSSDCallMessage1SendingEnd(Trainer Finish_CourseSSDCallMessage1)
		ExecutionEnd::Finish_CourseSSDExecution1StartEnd(Finish_CourseService Finish_CourseSSDExecution1)
		ExecutionEnd::Finish_CourseSSDExecution1FinishEnd(Finish_CourseService Finish_CourseSSDExecution1)
		MessageEnd::Finish_CourseSSDCallMessage1ReturnReceivingEnd(Trainer Finish_CourseSSDCallMessage1Return)
		MessageEnd::Finish_CourseSSDCallMessage3SendingEnd(Trainer Finish_CourseSSDCallMessage3)
		ExecutionEnd::Finish_CourseSSDExecution2StartEnd(Finish_CourseService Finish_CourseSSDExecution2)
		ExecutionEnd::Finish_CourseSSDExecution2FinishEnd(Finish_CourseService Finish_CourseSSDExecution2)
		MessageEnd::Finish_CourseSSDCallMessage3ReturnReceivingEnd(Trainer Finish_CourseSSDCallMessage3Return)
		MessageEnd::Finish_CourseSSDCallMessage5SendingEnd(Trainer Finish_CourseSSDCallMessage5)
		ExecutionEnd::Finish_CourseSSDExecution3StartEnd(Finish_CourseService Finish_CourseSSDExecution3)
		ExecutionEnd::Finish_CourseSSDExecution3FinishEnd(Finish_CourseService Finish_CourseSSDExecution3)
		MessageEnd::Finish_CourseSSDCallMessage5ReturnReceivingEnd(Trainer Finish_CourseSSDCallMessage5Return)

	}

	Service GymSystemSystem {

	}

	Service ThirdPartyServices {

	}

	Service  Cancel_book_CourseService {

		[Operation]
		listAllCourseBooked(member_id: String)
		confirmCancelBook(course_id : String, member_id : String, status: RecordStatus[NORMAL|CANCEL])
		requestRefund(course_id : String, member_id : String, bestatus: PayStatus[UNPAIED|PAIED|REFUND|COMPLETED], afstatus: PayStatus[UNPAIED|PAIED|REFUND|COMPLETED])

	}

	Service Book_CourseService {

		[Operation]
		listAllCourseAvailable(member_id: String)
		chooseOneBooking(member_id : String, course_id : String,  status: RecordStatus[NORMAL|CANCEL])
		payFee(member_id : String, course_id : String, datetime: String, status: PayStatus[UNPAIED|PAIED|REFUND|COMPLETED])

	}

	Service LoginService {

		[Operation]
		login_trainer(phone: String, password: String)
		login_frontdesk(phone: String, password: String)
		login_member(phone: String, password: String)

	}

	Service Register_memberService {

		[Operation]
		input_member_info(id: String, name: String, age: Integer, phone: String, description: String, datetime: String)

	}

	Service Register_trainerService {

		[Operation]
		input_trainer_info(id: String, name: String, age: Integer, phone: String, description: String, datetime: String)

	}

	Service Create_CourseService {

		[Operation]
		requestCreateCourse(trainer_id: String)
		confirmCourseInfo(course_id:String, register_time:String, register_end_time:String, begin_time:String, end_time:String, course_name:String, description:String, trainer_id:String, cost: Real)

	}

	Service Update_scheduleService {

		[Operation]
		listCourseByTrainer(trainer_id: String)
		chooseSpecificCourse(trainer_id: String, course_id: String)
		confirmUpdateInfo(course_id:String, course_name:String, begin_time:String, end_time:String, description:String, trainer_id:String)

	}

	Service Finish_CourseService {

		[Operation]
		listAllCourseByTrainer(trainer_id: String)
		confirmCourseFinish(trainer_id: String, course_id: String)
		requestBonus(trainer_id: String, course_id: String)

	}

	Contract Cancel_book_CourseService::listAllCourseBooked(member_id : String) : Set(CourseRecord) {

		definition:
			records:CourseRecord = CourseRecord.allInstance()->any(re:CourseRecord | re.UserId = member_id)

//			courseIds = records->collect(re | re.CourseId)
		/* precondition: 会员必须存在 */
		precondition:
			user.oclIsUndefined() = false

		postcondition:
			result = records
	}

	Contract Cancel_book_CourseService::confirmCancelBook(course_id : String, member_id : String, status: RecordStatus[NORMAL|CANCEL]) : Boolean {

		/* definition */
		definition:
			user:Member = Member.allInstance()->any(m:Member | m.Id = member_id),
			course:Course = Course.allInstance()->any(c:Course | c.Id = course_id),
			record:CourseRecord = CourseRecord.allInstance()->select(re:CourseRecord | re.UserId = member_id and re.CourseId=course_id)

		/* precondition: 
		 *     1. 用户和课程必须存在
		 *     2. 用户必须已预订该课程
		 */
		precondition:
			user.oclIsUndefined() = false and
			course.oclIsUndefined() = false and
			record.oclIsUndefined() = false

		/* postcondition: 更新参与者和用户列表 */
		postcondition:
			record.Status = RecordStatus::CANCEL and
			result = true
	}

	Contract Cancel_book_CourseService::requestRefund(course_id : String, member_id : String, bestatus: PayStatus[UNPAIED|PAIED|REFUND|COMPLETED], afstatus: PayStatus[UNPAIED|PAIED|REFUND|COMPLETED]) : Boolean {

		/* definition */
		definition:
			user:Member = Member.allInstance()->any(m:Member | m.Id = member_id),
			cls:Course = Course.allInstance()->any(c:Course | c.Id = course_id),
			payment:CoursePayment = Payment.allInstance()->any(p:CoursePayment | p.UserId = member_id and p.CourseId = course_id)

		/* precondition: 
		 *     1. 用户、课程和支付记录必须存在
		 *     2. 用户已取消该课程（不在参与者中）
		 *     3. 支付状态为已完成
		 */
		precondition:
			user.oclIsUndefined() = false and
			cls.oclIsUndefined() = false and
			payment.oclIsUndefined() = false and
			payment.PayStatus = PayStatus::PAIED

		/* postcondition: 更新支付状态为已退款 */
		postcondition:
			payment.PayStatus = PayStatus::REFUND and
			result = true
	}

	Contract Book_CourseService::listAllCourseAvailable(member_id : String) : Set(Course) {

		definition:
			user:Member = Member.allInstance()->any(m:Member | m.Id = member_id)

		/* precondition: 会员必须存在 */
		precondition:
			user.oclIsUndefined() = false

		postcondition:
			result = Course.allInstance()
	}

	Contract Book_CourseService::chooseOneBooking(member_id : String, course_id : String, status: RecordStatus[NORMAL|CANCEL]) : Boolean {

		/* definition */
		definition:
			user:Member = Member.allInstance()->any(m:Member | m.Id = member_id),
			cls:Course = Course.allInstance()->any(c:Course | c.Id = course_id)

		/* precondition: 
		 *     1. 用户和课程必须存在
		 *     2. 用户未预订该课程
		 *     3. 用户未报名
		 */
		precondition:
			user.oclIsUndefined() = false and
			cls.oclIsUndefined() = false

		postcondition:
			let record:CourseRecord in
			record.oclIsNew() and
			record.UserId = member_id and
			record.CourseId = course_id and
			record.status = RecordStatus::NORMAL and
			CourseRecord.allInstance()->includes(record) and
			result = true
	}

	Contract Book_CourseService::payFee(member_id : String, course_id : String, datetime: String, status: PayStatus[UNPAIED|PAIED|REFUND|COMPLETED]) : Boolean {

		/* definition */
		definition:
			user:Member = Member.allInstance()->any(m:Member | m.Id = member_id),
			cls:Course = Course.allInstance()->any(c:Course | c.Id = course_id)

		/* precondition: 
		 *     1. 用户和课程必须存在
		 *     2. 用户已选择该课程（在参与者中）
		 */
		precondition:
			user.oclIsUndefined() = false and
			cls.oclIsUndefined() = false

		postcondition:
			let payment:CoursePayment in
			payment.oclIsNew() and
			payment.UserId = member_id and
			payment.CourseId = course_id and
			payment.Price = cls.Cost and
			payment.PayTime = datetime and
			payment.PayStatus = PayStatus::PAIED and
			CoursePayment.allInstance()->includes(payment) and
			result = true
	}

	Contract LoginService::login_member(phone : String, password : String) : Boolean {

		/* definition */
		definition:
			member:Member = Member.allInstance()->any(m:Member | m.Phone = phone)

		/* precondition: 
		 *     1. 手机号对应的会员必须存在
		 *     2. 密码必须匹配
		 */
		precondition:
			member.oclIsUndefined() = false and
			member.Password = password

		/* postcondition: 返回固定true（通过precondition保证合法性） */
		postcondition:
			result = true
	}

	Contract LoginService::login_trainer(phone : String, password : String) : Boolean {

		/* definition */
		definition:
			trainer:Trainer = Trainer.allInstance()->any(t:Trainer | t.Phone = phone)

		/* precondition: 
		 *     1. 手机号对应的教练必须存在
		 *     2. 密码必须匹配
		 */
		precondition:
			trainer.oclIsUndefined() = false and
			trainer.Password = password

		/* postcondition */
		postcondition:
			result = true
	}

	Contract LoginService::login_frontdesk(phone : String, password : String) : Boolean {

		/* precondition: 
		 *     1. 手机号对应的前台必须存在
		 *     2. 密码必须匹配
		 */
		precondition:
			phone = "admin" and
			password = "admin"

		/* postcondition */
		postcondition:
			result = true
	}

	Contract Register_memberService::input_member_info(id: String, name: String, age: Integer, phone: String, description: String, datetime: String) : Boolean {

		precondition:
			true

		postcondition:
			let mem:Member in
			mem.oclIsNew() and
			mem.Id = id and
			mem.Name = name and
			mem.Phone = phone and
			mem.Description = description and
			mem.Password = "default123" and
			mem.RegisterTime = datetime and
			Member.allInstance()->includes(mem) and
			result = true
	}

	Contract Register_trainerService::input_trainer_info(id: String, name: String, age: Integer, phone: String, description: String, datetime: String) : Boolean {

		precondition:
			true

		postcondition:
			let newTrainer:Trainer in
			newTrainer.oclIsNew() and
			newTrainer.Id = id and
			newTrainer.Name = name and
			newTrainer.Phone = phone and
			newTrainer.Description = description and
			newTrainer.Password = "default123" and
			newTrainer.RegisterTime = datetime and
			Trainer.allInstance()->includes(newTrainer) and
			result = true
	}

	Contract Create_CourseService::requestCreateCourse(trainer_id : String) : Boolean {

		definition:
			trainer:Trainer = Trainer.allInstance()->any(t:Trainer | t.Id = trainer_id)

		precondition:
			trainer.oclIsUndefined() = false

		postcondition:
			result = true
	}

	Contract Create_CourseService::confirmCourseInfo(course_id:String, register_time:String, register_end_time:String, begin_time:String, end_time:String, course_name:String, description:String, trainer_id:String, cost: Real) : Boolean {

		definition:
			trainer:Trainer = Trainer.allInstance()->any(t:Trainer | t.Id = trainer_id)

		precondition:
			trainer.oclIsUndefined() = false

		postcondition:
			let newCourse:Course in
			newCourse.oclIsNew() and
			newCourse.RegisterStartTime = register_time and
			newCourse.RegisterEndTime = register_end_time and
			newCourse.EventStartTime = begin_time and
			newCourse.EventEndTime = end_time and
			newCourse.Id = course_id and
			newCourse.Name = course_name and
			newCourse.Cost = cost and
			newCourse.Description = description and
			newCourse.TrainerId = trainer_id and
			newCourse.Status = CourseStatus::UNSTARTED and
			Course.allInstance()->includes(newCourse) and
			result = true
	}

	Contract Update_scheduleService::listCourseByTrainer(trainer_id : String) : Boolean {

		definition:
			trainer:Trainer = Trainer.allInstance()->any(t:Trainer | t.Id = trainer_id)

		precondition:
			true

		postcondition:
			result = true
	}

	Contract Update_scheduleService::chooseSpecificCourse(trainer_id:String, course_id:String) : Boolean {

		definition:
			cls:Course = Course.allInstance()->any(c:Course | c.Id = course_id)

		precondition:
			cls.oclIsUndefined() = false and
			cls.TrainerId = trainer_id
		postcondition:
			result = true
	}

	Contract Update_scheduleService::confirmUpdateInfo(course_id:String, course_name:String, begin_time:String, end_time:String, description:String, trainer_id:String) : Boolean {

		definition:
			cls:Course = Course.allInstance()->any(c:Course | c.Id = course_id)

		precondition:
			cls.oclIsUndefined() = false

		postcondition:
			cls.name = course_name and
			cls.EventStartTime = begin_time and
			cls.EventEndTime = end_time and
			cls.Description = description and
			result = true
	}

	Contract Finish_CourseService::listAllCourseByTrainer(trainer_id : String) : Set(String) {

		definition:
			trainer:Trainer = Trainer.allInstance()->any(t:Trainer | t.Id = trainer_id)

		precondition:
			trainer.oclIsUndefined() = false
		postcondition:
			result = trainer.Courses
	}

	Contract Finish_CourseService::confirmCourseFinish(trainer_id:String, course_id:String) : Boolean {

		definition:
			cls:Course = Course.allInstance()->any(c:Course | c.Id = course_id)

		precondition:
			cls.oclIsUndefined() = false and
			cls.TrainerId = trainer_id

		postcondition:
			cls.Status = CourseStatus::COMPLETED and
			result = true
	}

	Contract Finish_CourseService::requestBonus(trainer_id:String, course_id:String) : Boolean {

		definition:
			cls:Course = Course.allInstance()->any(c:Course | c.Id = course_id),
			trainer:Trainer = Trainer.allInstance()->any(t:Trainer | t.Id = trainer_id)

		precondition:
			cls.oclIsUndefined() = false and
			trainer.oclIsUndefined() = false and
			cls.TrainerId = trainer_id

		postcondition:
			result = true
	}

}

DomainModel GymSystem {

	Entity Course {
		Id : String
		Name : String
		TrainerId: String
		Description: String
		RegisterStartTime: String
		RegisterEndTime: String
		EventStartTime: String
		EventEndTime: String
		Cost: Real
		Location: CourseRoom
		Capacity: Integer
		Status : CourseStatus[UNSTARTED|COMPLETED]

		[Refer]
		CoursetoCourseRoom : CourseRoom Association
		CoursetoCourseNotification : CourseNotification* Association
		CoursetoCoursePayment : CoursePayment* Association
		CoursetoCourseRecord : CourseRecord* Association
	}

	Entity Member extends FrontDesk {
		Name : String
		Description : String
		RegisterTime: String

		[Refer]
		MembertoCourse : Course* ! *- Association
		MembertoCourseNotification : CourseNotification* Association
		MembertoCourseRecord : CourseRecord* Association
	}

	Entity Trainer extends FrontDesk {
		Name : String
		Description : String
		RegisterTime: String

		[Refer]
		TrainertoCourse : Course* Association
	}

	Entity FrontDesk {
		Id : String
		Phone : String
		Password : String
	}

	Entity CourseRoom {
		Id : String
		Location: String
		Capacity: Integer
	}

	Entity CourseNotification {
		Id : String
		UserId: String
		Message: String
	}

	Entity CourseRecord {
		Id : String
		UserId: String
		CourseId: String
		Status : RecordStatus[NORMAL|CANCEL]
	}

	Entity CoursePayment {
		Id : String
		UserId: String
		CourseId: String
		Price: Real
		PayTime : String
		PayStatus : PayStatus[UNPAIED|PAIED|REFUND|COMPLETED]

		[Refer]
		CoursePaymenttoMember : Member* Association
	}

}

